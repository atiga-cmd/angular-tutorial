/*
const express = require('express');
const router = express.Router();
const OffreController = require('../controllers/offreController');

// Assurez-vous que chaque fonction dans le contr√¥leur est bien d√©finie
router.post('/offres', OffreController.ajouterOffre);
router.get('/offres', OffreController.getOffres);
router.delete('/supprimer/:id_offre', OffreController.deleteOffre);

module.exports = router;
*/

const express = require('express');
const router = express.Router();
const OffreController = require('../controllers/offreController');
const db = require('../config/db'); // ‚úÖ Important pour acc√©der √† MySQL avec async/await



// üëÄ Route : r√©cup√©rer toutes les offres
router.get('/offres', OffreController.getOffres);

// üóëÔ∏è Route : supprimer une offre
router.delete('/supprimer/:id_offre', async (req, res) => {
    const { id_offre } = req.params;
    console.log("üóëÔ∏è Route /supprimer/:id_offre appel√©e avec id =", id_offre);

    try {
        const [result] = await db.query('DELETE FROM Offre WHERE id_offre = ?', [id_offre]);

        if (result.affectedRows === 0) {
            console.log("‚ö†Ô∏è Aucune offre supprim√©e. L'offre n'existe peut-√™tre pas.");
            return res.status(404).json({ message: "Offre non trouv√©e." });
        }

        console.log("‚úÖ Offre supprim√©e avec succ√®s.");
        res.status(200).json({ message: "Offre supprim√©e avec succ√®s." });
    } catch (error) {
        console.error("‚ùå Erreur lors de la suppression de l'offre :", error);
        res.status(500).json({ message: "Erreur serveur", error });
    }
});

// ‚úÖ üîç Route : afficher les offres par recruteur
router.get('/offres/recruteur/:id', async (req, res) => {
    const id_rec = req.params.id;
    console.log("üîç Route /offres/recruteur/:id appel√©e avec id =", id_rec);

    try {
        const [rows] = await db.query('SELECT * FROM Offre WHERE id_rec = ?', [id_rec]);

        if (rows.length === 0) {
            console.log("‚ö†Ô∏è Aucune offre trouv√©e pour ce recruteur.");
            return res.status(404).json({ message: "Aucune offre trouv√©e." });
        }

        console.log("‚úÖ Offres trouv√©es :", rows);
        res.status(200).json(rows);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des offres :", error);
        res.status(500).json({ message: "Erreur serveur", error });
    }
});
// üîÑ Route : modifier une offre// üîÑ Route : modifier une offre
// üîÑ Route : modifier une offre
router.put('/modifier/:id_offre', async (req, res) => {
    const { id_offre } = req.params;
    const {
        typePoste,
        missions,
        salaire,
        local,
        competences,
        nomESE,
        domaine,
        datePublication,
        statut
    } = req.body;

    console.log("üîÑ Route /modifier/:id_offre appel√©e avec id =", id_offre);

    try {
        const [result] = await db.query(`
            UPDATE Offre SET 
                typePoste = ?, 
                missions = ?, 
                salaire = ?, 
                local = ?, 
                competences = ?, 
                nomESE = ?, 
                domaine = ?, 
                datePublication = ?, 
                statut = ?
            WHERE id_offre = ?
        `, [
            typePoste,
            missions,
            salaire,
            local,
            competences,
            nomESE,
            domaine,
            datePublication,
            statut,
            id_offre
        ]);

        if (result.affectedRows === 0) {
            console.log("‚ö†Ô∏è Aucune offre modifi√©e. L'offre n'existe peut-√™tre pas.");
            return res.status(404).json({ message: "Offre non trouv√©e." });
        }

        console.log("‚úÖ Offre modifi√©e avec succ√®s.");
        res.status(200).json({ message: "Offre modifi√©e avec succ√®s." });
    } catch (error) {
        console.error("‚ùå Erreur lors de la modification de l'offre :", error);
        res.status(500).json({ message: "Erreur serveur", error });
    }
});
// R√©cup√©rer une offre par ID
router.get('/offre/:id_offre', async (req, res) => {
    const { id_offre } = req.params;
    try {
        const [rows] = await db.query('SELECT * FROM Offre WHERE id_offre = ?', [id_offre]); // üõ†Ô∏è correction ici
        if (rows.length === 0) {
            return res.status(404).json({ message: 'Offre non trouv√©e' });
        }
        res.json(rows[0]);
    } catch (error) {
        console.error('Erreur r√©cup√©ration offre :', error);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});



module.exports = router;
