📂 back-end-gpt
 ├── 📂 config
 │   ├── db.js  <-- Configuration de la base de données
 ├── 📂 models
 │   ├── adminModel.js
 │   ├── candidatModel.js
 │   ├── recruteurModel.js
 │   ├── offreModel.js
 │   ├── candidatureModel.js
 │   ├── messageModel.js
 ├── 📂 routes
 │   ├── adminRoutes.js
 │   ├── candidatRoutes.js
 │   ├── recruteurRoutes.js
 │   ├── offreRoutes.js
 │   ├── candidatureRoutes.js
 │   ├── messageRoutes.js
 ├── 📂 controllers
 │   ├── adminController.js
 │   ├── candidatController.js
 │   ├── recruteurController.js
 │   ├── offreController.js
 │   ├── candidatureController.js
 │   ├── messageController.js
 ├── server.js  <-- Point d'entrée du serveur
 ├── package.json  <-- Dépendances
 ├── .env  <-- Variables d'environnement

ajouter l’authentification JWT si ce n’est pas encore fait.

1️⃣ Méthode : POST
2️⃣ URL : http://localhost:5000/api/candidats/register
3️⃣ Body (JSON) :


{
    "nomCand": "Ali",
    "prenomCand": "Ben Salah",
    "emailCand": "ali.bensalah@example.com",
    "motPasse_cand": "mypassword"
}

1️⃣ Méthode : POST
2️⃣ URL : http://localhost:5000/api/candidats/login
3️⃣ Body (JSON) :


{
    "emailCand": "ali.bensalah@example.com",
    "motPasse_cand": "mypassword"
}
4️⃣ Headers :

Content-Type: application/json


✅ Tester une Route Protégée
1️⃣ Méthode : GET
2️⃣ URL : http://localhost:5000/api/candidats/profil
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6OC




#1452 - Cannot add or update a child row: a foreign key constraint fails (`recrutement_db`.`candidature`, CONSTRAINT `candidature_ibfk_2` FOREIGN KEY (`id_offre`) REFERENCES `offre` (`id_offre`) ON DELETE CASCADE)

POST http://localhost:5000/api/offres ➝ Ajouter une offre

GET http://localhost:5000/api/offres ➝ Récupérer toutes les offres

GET http://localhost:5000/api/offres/1 ➝ Récupérer une offre par ID

PUT http://localhost:5000/api/offres/1 ➝ Modifier une offre just pour loffre

DELETE http://localhost:5000/api/offres/1 ➝ Supprimer une offre
*******
********
pour les cndidature rec etoffre et message
POST http://localhost:5000/api/offres ➝ Ajouter une offre

GET http://localhost:5000/api/offres ➝ Récupérer toutes les offres

GET http://localhost:5000/api/offres/1 ➝ Récupérer une offre par ID

DELETE http://localhost:5000/api/offres/1 ➝ Supprimer une offre






Fonctionnalité	Méthode	URL	Headers	Body (JSON)

💼 Ajouter une offre	POST	/api/offres	✅ (token)	✅
📝 Postuler à une offre	POST	/api/candidatures	✅ (token)	✅
💬 Envoyer un message	POST	/api/messages	✅ (token)	✅
❌ Supprimer une offre	DELETE	/api/offres/1	✅ (token)	❌
